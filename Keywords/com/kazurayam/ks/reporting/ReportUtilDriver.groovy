package com.kazurayam.ks.reporting

import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes

import com.kms.katalon.core.reporting.ReportUtil
//import com.kazurayam.ks.reporting.ReportUtilWrapper as ReportUtil
import com.kms.katalon.core.logging.model.TestSuiteLogRecord

public class ReportUtilDriver {

	/**
	 * read a "execution0.log" file in the "buchDir", 
	 * generate reports as HTML,XML,CSV and save then in the "targetDir"
	 * 
	 * @param bunchDir e.g, "[projectDir]/Reports/20211120_140743/main/TS1/20211120_140743/"
	 * @param targetDir e.g, "/Users/kazurayam/tmp/"
	 */
	static void generateABunch(Path bunchDir, Path targetDir) {
		// verify the given parameters
		Objects.requireNonNull(bunchDir)
		assert Files.exists(bunchDir) : "${bunchDir} is not presennt"
		Objects.requireNonNull(targetDir)
		// make sure the output directory to exist;
		// create the directory if it is not there
		Files.createDirectories(targetDir)
		// identify the input.
		// locate the execution0.log file of this TestSuite execution
		// generated by Katalon Studio in the Reports sub-folder
		Path inputBunchDir = bunchDir
		Path inputReportsDir = findAncestorReportsDir(inputBunchDir)
		TestSuiteLogRecord suiteLogEntry = ReportUtil.generate(inputBunchDir.toString())
		// identify the output
		// you can choose any directory as the `targetDir` parameter
		Path outputBunchDir = resolveOutputReportDir(inputReportsDir, inputBunchDir, targetDir)
		// do transform the execution0.log file into reports in HTML,XML and CSV
		ReportUtil.writeLogRecordToFiles(suiteLogEntry, outputBunchDir.toFile())
	}

	/**
	 * scan the "reportsDir" for the descendant directories that contains "execution0.log" file,
	 * and repeat calling "generateABuch" method to generate bunches of reports as HTML,XML and CSV.
	 * 
	 * @param reportsDir e.g, "[projectDir]/Reports/"
	 * @param targetDir e.g, "/Users/kazurayam/tmp/"
	 */
	static void generateBunches(Path reportsDir, Path targetDir) {
		// verify parameters
		Objects.requireNonNull(reportsDir)
		assert Files.exists(reportsDir) : "${reportsDir.toString()} is not present"
		Objects.requireNonNull(targetDir)
		// iterate over the bunch directories (that contains execution0.log file) 
		// under the "[projectDir]/Reports" directory
		List<Path> bunchDirs = new ArrayList<Path>()
		Files.walkFileTree(reportsDir, new SimpleFileVisitor<Path>() {
					@Override
					FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
						if (file.getFileName().toString() == 'execution0.log') {
							bunchDirs.add(file.getParent())
						}
						return FileVisitResult.CONTINUE
					}
				})
		// generate reports into the specified target directory
		bunchDirs.each({ Path bunchDir ->
			generateABunch(bunchDir, targetDir)
		})
	}

	static Path resolveOutputReportDir(Path inputReportsDir, Path inputBunchDir, Path targetDir) {
		Path relativePath = inputReportsDir.relativize(inputBunchDir)
		return targetDir.resolve(relativePath)
	}

	static Path findAncestorReportsDir(Path bunchDir) {
		return bunchDir.getParent().getParent().getParent().getParent()
	}

}
